<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[CodingHuaHua]]></title>
  <subtitle><![CDATA[Have an aim in life.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://changqingshuya.github.io/"/>
  <updated>2014-03-17T14:05:59.187Z</updated>
  <id>http://changqingshuya.github.io/</id>
  
  <author>
    <name><![CDATA[changqingshuya]]></name>
    <email><![CDATA[liuchangqing1210@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Web Service项目搭建]]></title>
    <link href="http://changqingshuya.github.io/2014/03/17/web_service01/"/>
    <id>http://changqingshuya.github.io/2014/03/17/web_service01/</id>
    <published>2014-03-17T14:05:14.000Z</published>
    <updated>2014-03-17T14:05:48.000Z</updated>
    <content type="html"><![CDATA[<p>　　    为了能够实现异构系统的交互我们可以使用webservice解决这个问题。异构系统之间的交互可以有多种方法实现，webservice给我们提供了一种很好的思路，找到异构系统之间的桥梁，XML便是这样一种媒介，语言可以不同，基于XML定义出相应的协议，不同的语言实现协议即可达到不同系统的互通。
<a id="more"></a></p>
<p>　　Webservice使用XML来编解码数据，使用SOAP来传输数据；在我们学习的过程中最重要的也许是两方面的内容：SOAP和WSDL。</p>
<p>　　SOAP：Simple Object Access Protocol（简易对象访问协议）。有了XML作为数据格式，如何将对象和XML进行映射，SOAP协议就是对XML数据进行处理和传输从而满足我们的需求。更确切的说是：SOAP协议=HTTP协议+XML数据格式。SOAP协议将XML数据添加一些HTTP头信息进行封装传输。</p>
<p>　　WSDL：webservice description language（web服务描述语言）。作为服务的提供者怎样给客户端描述自己服务的使用方法呢。这就是WSDL说实现的功能。方法接收的参数、方法的返回值等信息就是通过WSDL进行描述实现。</p>
<p>　　Java实现的webservice实质是一个大的Servlet。客户端通过wsimport导出服务端的代理类，客户端就可以通过这些代理类发送服务请求，客户端的代理类将用户的请求封装成SOAP格式的数据传输到服务端，服务端接收到SOAP消息处理后调用相应的方法然后将结果封装成SOAP数据返回给客户端，客户端就能接收到数据。这就是整个的交互的过程。</p>
<p>　　我们要使用Java实现webservice的过程就是：实现服务端，编写客户端。</p>
<p>　　下面使用一种方法进行webservice的实现（JAX-WS实现webservice）</p>
<p>　　实现服务端：</p>
<p>　　编写WSDL文件，使用wsimport命令根据wsdl文件导出接口，并完成接口的实现（命令执行后生成多个类，我们只使用其中的一个接口）；</p>
<p>　　实现客户端：</p>
<p>　　使用wsimport命令根据服务端提供的wsdl的url路径导出客户端的代理类（一组相关的类）。客户端使用这些代理类完成相关方法的远程调用。</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;wsdl:definitions xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; 
xmlns:tns=&quot;http://service.edu.cn&quot; 
xmlns:wsdl=&quot;http://schemas.xmlsoap.org/wsdl/&quot; 
xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
name=&quot;BookService&quot; 
targetNamespace=&quot;http://service.edu.cn&quot;&gt;

  &lt;wsdl:types&gt;
&lt;xsd:schema targetNamespace=&quot;http://service.edu.cn&quot;&gt;
    &lt;xsd:element name=&quot;search&quot; type=&quot;tns:search&quot;/&gt;
    &lt;xsd:element name=&quot;searchResponse&quot; type=&quot;tns:searchResponse&quot;/&gt;
    &lt;xsd:element name=&quot;login&quot; type=&quot;tns:login&quot;/&gt;
    &lt;xsd:element name=&quot;loginResponse&quot; type=&quot;tns:loginResponse&quot;/&gt;
    &lt;xsd:element name=&quot;UserException&quot; type=&quot;tns:UserException&quot;/&gt;
    &lt;xsd:element name=&quot;licenceInfo&quot; type=&quot;tns:licenceInfo&quot;/&gt;
&lt;xsd:complexType name=&quot;licenceInfo&quot;&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name=&quot;registerUser&quot; type=&quot;tns:user&quot;/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;
&lt;xsd:complexType name=&quot;UserException&quot;&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name=&quot;message&quot; type=&quot;xsd:string&quot;/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;
&lt;xsd:complexType name=&quot;search&quot;&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name=&quot;bookname&quot; type=&quot;xsd:string&quot;/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;
&lt;xsd:complexType name=&quot;searchResponse&quot;&gt;
    &lt;xsd:sequence maxOccurs=&quot;unbounded&quot; minOccurs=&quot;1&quot;&gt;
        &lt;xsd:element name=&quot;book&quot; type=&quot;tns:book&quot;/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;
&lt;xsd:complexType name=&quot;login&quot;&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name=&quot;username&quot; type=&quot;xsd:string&quot;/&gt;
        &lt;xsd:element name=&quot;password&quot; type=&quot;xsd:string&quot;/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;
&lt;xsd:complexType name=&quot;loginResponse&quot;&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name=&quot;user&quot; type=&quot;tns:user&quot;/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;
&lt;xsd:complexType name=&quot;user&quot;&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name=&quot;username&quot; type=&quot;xsd:string&quot;/&gt;
        &lt;xsd:element name=&quot;password&quot; type=&quot;xsd:string&quot;/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;
&lt;xsd:complexType name=&quot;book&quot;&gt;
    &lt;xsd:sequence&gt;
        &lt;xsd:element name=&quot;author&quot; type=&quot;xsd:string&quot;/&gt;
        &lt;xsd:element name=&quot;barcode&quot; type=&quot;xsd:string&quot;/&gt;
        &lt;xsd:element name=&quot;bookName&quot; type=&quot;xsd:string&quot;/&gt;
        &lt;xsd:element name=&quot;bookcaseName&quot; type=&quot;xsd:string&quot;/&gt;
        &lt;xsd:element name=&quot;bookcaseid&quot; type=&quot;xsd:int&quot;/&gt;
        &lt;xsd:element name=&quot;days&quot; type=&quot;xsd:int&quot;/&gt;
        &lt;xsd:element name=&quot;del&quot; type=&quot;xsd:int&quot;/&gt;
        &lt;xsd:element name=&quot;id&quot; type=&quot;xsd:integer&quot;/&gt;
        &lt;xsd:element name=&quot;inTime&quot; type=&quot;xsd:string&quot;/&gt;
        &lt;xsd:element name=&quot;isbn&quot; type=&quot;xsd:string&quot;/&gt;
        &lt;xsd:element name=&quot;operator&quot; type=&quot;xsd:string&quot;/&gt;
        &lt;xsd:element name=&quot;page&quot; type=&quot;xsd:int&quot;/&gt;
        &lt;xsd:element name=&quot;price&quot; type=&quot;xsd:float&quot;/&gt;
        &lt;xsd:element name=&quot;publishing&quot; type=&quot;xsd:string&quot;/&gt;
        &lt;xsd:element name=&quot;storage&quot; type=&quot;xsd:int&quot;/&gt;
        &lt;xsd:element name=&quot;translator&quot; type=&quot;xsd:string&quot;/&gt;
        &lt;xsd:element name=&quot;typeId&quot; type=&quot;xsd:int&quot;/&gt;
        &lt;xsd:element name=&quot;typeName&quot; type=&quot;xsd:string&quot;/&gt;
    &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;
&lt;/xsd:schema&gt;
  &lt;/wsdl:types&gt;


  &lt;wsdl:message name=&quot;licenceInfo&quot;&gt;
  &lt;wsdl:part element=&quot;tns:licenceInfo&quot; name=&quot;licenceInfo&quot;/&gt;
  &lt;/wsdl:message&gt;

  &lt;wsdl:message name=&quot;UserException&quot;&gt;
      &lt;wsdl:part element=&quot;tns:UserException&quot; name=&quot;fault&quot;/&gt;
  &lt;/wsdl:message&gt;


  &lt;wsdl:message name=&quot;search&quot;&gt;
    &lt;wsdl:part element=&quot;tns:search&quot; name=&quot;parameters&quot;/&gt;
  &lt;/wsdl:message&gt;
  &lt;wsdl:message name=&quot;searchResponse&quot;&gt;
    &lt;wsdl:part element=&quot;tns:searchResponse&quot; name=&quot;parameters&quot;/&gt;
  &lt;/wsdl:message&gt;

  &lt;wsdl:message name=&quot;login&quot;&gt;
    &lt;wsdl:part element=&quot;tns:login&quot; name=&quot;parameters&quot;/&gt;
  &lt;/wsdl:message&gt;
  &lt;wsdl:message name=&quot;loginResponse&quot;&gt;
    &lt;wsdl:part element=&quot;tns:loginResponse&quot; name=&quot;parameters&quot;/&gt;
  &lt;/wsdl:message&gt;


  &lt;wsdl:portType name=&quot;IBookService&quot;&gt;

     &lt;wsdl:operation name=&quot;search&quot;&gt;
      &lt;wsdl:input message=&quot;tns:search&quot;/&gt;
      &lt;wsdl:output message=&quot;tns:searchResponse&quot;/&gt;
      &lt;wsdl:fault message=&quot;tns:UserException&quot; name=&quot;UserException&quot;/&gt;
    &lt;/wsdl:operation&gt;

     &lt;wsdl:operation name=&quot;login&quot;&gt;
      &lt;wsdl:input message=&quot;tns:login&quot;/&gt;
      &lt;wsdl:output message=&quot;tns:loginResponse&quot;/&gt;
      &lt;wsdl:fault message=&quot;tns:UserException&quot; name=&quot;UserException&quot;/&gt;
    &lt;/wsdl:operation&gt;

  &lt;/wsdl:portType&gt;


  &lt;wsdl:binding name=&quot;BookServiceSOAP&quot; type=&quot;tns:IBookService&quot;&gt;
    &lt;soap:binding style=&quot;document&quot; transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;

    &lt;wsdl:operation name=&quot;search&quot;&gt;
      &lt;wsdl:input&gt;
        &lt;soap:body use=&quot;literal&quot;/&gt;
      &lt;/wsdl:input&gt;
      &lt;wsdl:output&gt;
        &lt;soap:body use=&quot;literal&quot;/&gt;
      &lt;/wsdl:output&gt;
       &lt;wsdl:fault name=&quot;UserException&quot;&gt;
          &lt;soap:fault name=&quot;UserException&quot; use=&quot;literal&quot;/&gt;
      &lt;/wsdl:fault&gt;

    &lt;/wsdl:operation&gt;

    &lt;wsdl:operation name=&quot;login&quot;&gt;
      &lt;wsdl:input&gt;
        &lt;soap:body use=&quot;literal&quot;/&gt;
      &lt;/wsdl:input&gt;
      &lt;wsdl:output&gt;
        &lt;soap:body use=&quot;literal&quot;/&gt;
      &lt;/wsdl:output&gt;
      &lt;wsdl:fault name=&quot;UserException&quot;&gt;
          &lt;soap:fault name=&quot;UserException&quot; use=&quot;literal&quot;/&gt;
      &lt;/wsdl:fault&gt;
    &lt;/wsdl:operation&gt;

  &lt;/wsdl:binding&gt;


  &lt;wsdl:service name=&quot;BookService&quot;&gt;
    &lt;wsdl:port binding=&quot;tns:BookServiceSOAP&quot; name=&quot;BookServicePort&quot;&gt;
      &lt;soap:address location=&quot;http://localhost:8080/Library/us&quot;/&gt;
    &lt;/wsdl:port&gt;
  &lt;/wsdl:service&gt;
&lt;/wsdl:definitions&gt;
</code></pre><p>在上面的wsdl文件的编写过程中注意编写流程：element-&gt;message-&gt;portType</p>
<p>编写两个实体类User和Book，自己实现；</p>
<p>使用wsimport命令导出接口。在命令行中切换到book.wsdl文件路径下执行：wsimport -d e：/tool/book -keep book.wsdl即可将接口和类导出到e盘相应路径中；</p>
<p>将IBookService接口拷贝到我们的项目中，编写实现类BookServiceImpl完成相关功能；
我们使用web进行服务的发布。在web.xml中配置监听器：</p>
<pre><code>&lt;listener&gt;
    &lt;listener-class&gt;com.sun.xml.ws.transport.http.servlet.WSServletContextListener&lt;/listener-class&gt;
&lt;/listener&gt;
&lt;servlet&gt;
    &lt;servlet-name&gt;BookService&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.sun.xml.ws.transport.http.servlet.WSServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;    
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;BookService&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/us&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre><p>在webcontent目录下建立sun-jaxws.xml文件绑定我们的服务实现类，编写如下：
    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
    <endpoints xmlns="http://java.sun.com/xml/ns/jax-ws/ri/runtime" version="2.0">
      <endpoint name="BookService" 
           implementation="cn.edu.service.BookServiceImpl" url-pattern="/us"/>
    </endpoints></p>
<p>启动web项目访问：<a href="http://localhost:8080/Library/us?wsdl即可访问到xml格式的wsdl内容。" target="_blank">http://localhost:8080/Library/us?wsdl即可访问到xml格式的wsdl内容。</a></p>
<p>客户端：</p>
<p>根据服务端公布的url路径生成代理类：</p>
<p>wsimport -d e：/tool/book -keep <a href="http://localhost:8080/Library/us?wsdl即可生成，将生成的所有类拷贝到我们的项目中；" target="_blank">http://localhost:8080/Library/us?wsdl即可生成，将生成的所有类拷贝到我们的项目中；</a></p>
<p>调用代理类完成方法调用；</p>
<p>在我的项目中使用的是IBookService接口和BookService类</p>
<p>注意的问题：</p>
<p>Jax-ws2.2和jdk6冲突问题：</p>
<p>报错信息：java.lang.NoSuchMethodError: javax.xml.ws.WebFault.messageName()Ljava/lang/String;</p>
<p>解决方法：在jdk的jre目录中建立endorsed文件夹（我的目录是：C:\Program Files (x86)\Java\jdk1.6.0_27\jre\lib\endorsed），将jaxws-ri-2.2.5中的jaxws-api.jar拷贝到endorsed文件夹中。同时将endorsed文件夹拷贝到tomcat根目录一份即可。</p>
]]></content>
    <summary type="html"><![CDATA[<p>　　    为了能够实现异构系统的交互我们可以使用webservice解决这个问题。异构系统之间的交互可以有多种方法实现，webservice给我们提供了一种很好的思路，找到异构系统之间的桥梁，XML便是这样一种媒介，语言可以不同，基于XML定义出相应的协议，不同的语言实现协议即可达到不同系统的互通。
]]></summary>
    
      <category term="webservice" scheme="http://changqingshuya.github.io/tags/webservice/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://changqingshuya.github.io/2014/02/09/hello-world/"/>
    <id>http://changqingshuya.github.io/2014/02/09/hello-world/</id>
    <published>2014-02-09T03:18:35.000Z</published>
    <updated>2014-02-09T03:18:36.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://zespia.tw/hexo" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs" target="_blank">documentation</a> to learn how to use.</p>
]]></content>
    
    
  </entry>
  
</feed>
